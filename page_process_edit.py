
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
import round_rect

import page_home
import page_process_play
import page_result_list
import page_setting

class PageProcessEdit(Frame):

    # user data

    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame_process")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data
        self.process_setting = {}
        self.process_setting['preextract'] = 0
        self.process_setting['precool'] = 1
        self.process_setting['extracttime'] = 1
        self.process_setting['spinrpm'] = 0
        self.process_setting['pcrcycle'] = 2
        self.process_setting['processtime'] = "00:45"

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)

        '''
        # gradient background
        self.canvas = GradientFrame(parent, colors = ("white", "#F0F0F0"), width = 1024, height = 600)
        self.canvas.config(direction = self.canvas.top2bottom)
        '''
        # flat background
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        
        self.canvas.grid(row = 0, column = 0, sticky = "nsew")

        # all images here
        self.img_opt_high_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_high_off.png"))
        self.img_opt_high_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_high_on.png"))
        self.img_opt_low_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_low_off.png"))
        self.img_opt_low_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_low_on.png"))
        self.img_opt_medium_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_medium_off.png"))
        self.img_opt_medium_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_medium_on.png"))
        self.img_opt_none_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_none_off.png"))
        self.img_opt_none_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_none_on.png"))
        self.img_opt_normal_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_normal_off.png"))
        self.img_opt_normal_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_normal_on.png"))
        self.img_opt_short_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_short_off.png"))
        self.img_opt_short_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_short_on.png"))
        self.img_opt_yes_off = PhotoImage(
            file=self.relative_to_assets("btn_opt_yes_off.png"))
        self.img_opt_yes_on = PhotoImage(
            file=self.relative_to_assets("btn_opt_yes_on.png"))
        self.button_image_process_on = PhotoImage(
            file=self.relative_to_assets("button_process_on.png"))
        self.button_image_result_off = PhotoImage(
            file=self.relative_to_assets("button_result_off.png"))
        self.button_image_home_off = PhotoImage(
            file=self.relative_to_assets("button_home_off.png"))
        self.button_image_setting_off = PhotoImage(
            file=self.relative_to_assets("button_setting_off.png"))
        self.button_image_play_off = PhotoImage(file=self.relative_to_assets("button_play_off.png"))
        self.button_image_stop_off = PhotoImage(file=self.relative_to_assets("button_stop_off.png"))
        self.button_image_edit_on = PhotoImage(file=self.relative_to_assets("button_edit_on.png"))
        
        # add elements here

        self.canvas.create_rectangle(
            120.0,
            0.0,
            904.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        #self.button_image_1 = PhotoImage(
        #    file=self.relative_to_assets("button_1.png"))
        self.button_process = Button(self,
            image=self.button_image_process_on,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            relief="flat"
        )
        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        #self.button_image_2 = PhotoImage(
        #    file=self.relative_to_assets("button_2.png"))
        self.button_home = Button(self,
            image=self.button_image_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_home,
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        #self.button_image_3 = PhotoImage(
        #    file=self.relative_to_assets("button_3.png"))
        self.button_result = Button(self,
            image=self.button_image_result_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_result,
            relief="flat"
        )
        self.button_result.place(
            x=0.0,
            y=206.0,
            width=120.0,
            height=103.0
        )

        #self.button_image_4 = PhotoImage(
        #    file=self.relative_to_assets("button_4.png"))
        self.button_setting = Button(self,
            image=self.button_image_setting_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_setting,
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        self.canvas.create_text(
            148.0,
            16.0, #24.0,
            anchor="nw",
            text="PROCESS",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0,
            0.0,
            1024.0,
            600.0,
            fill="#E6EFF4",
            outline="")

        #self.button_image_5 = PhotoImage(
        #    file=self.relative_to_assets("button_5.png"))
        self.button_play = Button(self,
            image=self.button_image_play_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_play,
            relief="flat"
        )
        self.button_play.place(
            x=903.0,
            y=105.0,
            width=121.0,
            height=103.0
        )

        #self.button_image_6 = PhotoImage(
        #    file=self.relative_to_assets("button_6.png"))
        self.button_stop = Button(self,
            image=self.button_image_stop_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_6 clicked"),
            relief="flat"
        )
        self.button_stop.place(
            x=903.0,
            y=208.0,
            width=121.0,
            height=103.0
        )

        self.canvas.create_text(
            148.0,
            105.0, #113.0,
            anchor="nw",
            text="PRE-EXTRACT",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        #self.button_image_7 = PhotoImage(
        #    file=self.relative_to_assets("button_7.png"))
        self.rbtn_preextract_none = Button(self,
            image=self.img_opt_none_on,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_preextract_none,
            command=0,
            relief="flat"
        )
        self.rbtn_preextract_none.place(
            x=354.0,
            y=96.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_8 = PhotoImage(
        #    file=self.relative_to_assets("button_8.png"))
        self.rbtn_preextract_yes = Button(self,
            image=self.img_opt_yes_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_preextract_yes,
            command=0,
            relief="flat"
        )
        self.rbtn_preextract_yes.place(
            x=522.0,
            y=96.0,
            width=140.0,
            height=70.0
        )

        self.canvas.create_text(
            148.0,
            200.0, #208.0,
            anchor="nw",
            text="PRE-COOL",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        #self.button_image_9 = PhotoImage(
        #    file=self.relative_to_assets("button_9.png"))
        self.rbtn_precool_none = Button(self,
            image=self.img_opt_none_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_precool_none,
            command=0,
            relief="flat"
        )
        self.rbtn_precool_none.place(
            x=354.0,
            y=191.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_10 = PhotoImage(
        #    file=self.relative_to_assets("button_10.png"))
        self.rbtn_precool_yes = Button(self,
            image=self.img_opt_yes_on,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_precool_yes,
            command=0,
            relief="flat"
        )
        self.rbtn_precool_yes.place(
            x=522.0,
            y=191.0,
            width=140.0,
            height=70.0
        )

        self.canvas.create_text(
            148.0,
            293.0, #301.0,
            anchor="nw",
            text="EXTRACT TIME",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            148.0,
            387.0, #395.0,
            anchor="nw",
            text="SPIN RPM",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )


        #self.button_image_12 = PhotoImage(
        #    file=self.relative_to_assets("button_12.png"))
        self.rbtn_extract_none = Button(self,
            image=self.img_opt_none_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_extracttime_none,
            command=0,
            relief="flat"
        )
        self.rbtn_extract_none.place(
            x=352.0,
            y=284.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_11 = PhotoImage(
        #    file=self.relative_to_assets("button_11.png"))
        self.rbtn_extract_short = Button(self,
            image=self.img_opt_short_on,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_extracttime_short,
            command=0,
            relief="flat"
        )
        self.rbtn_extract_short.place(
            x=522.0,
            y=284.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_13 = PhotoImage(
        #    file=self.relative_to_assets("button_13.png"))
        self.rbtn_extract_normal = Button(self,
            image=self.img_opt_normal_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_extracttime_normal,
            command=0,
            relief="flat"
        )
        self.rbtn_extract_normal.place(
            x=688.0,
            y=285.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_14 = PhotoImage(
        #    file=self.relative_to_assets("button_14.png"))
        self.rbtn_rpm_low = Button(self,
            image=self.img_opt_low_on,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_spinrpm_low,
            command=0,
            relief="flat"
        )
        self.rbtn_rpm_low.place(
            x=354.0,
            y=378.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_15 = PhotoImage(
        #    file=self.relative_to_assets("button_15.png"))
        self.rbtn_rpm_medium = Button(self,
            image=self.img_opt_medium_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_spinrpm_medium,
            command=0,
            relief="flat"
        )
        self.rbtn_rpm_medium.place(
            x=522.0,
            y=378.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_17 = PhotoImage(
        #    file=self.relative_to_assets("button_17.png"))
        self.rbtn_rpm_high = Button(self,
            image=self.img_opt_high_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_spinrpm_high,
            command=0,
            relief="flat"
        )
        self.rbtn_rpm_high.place(
            x=688.0,
            y=378.0,
            width=140.0,
            height=70.0
        )

        self.canvas.create_text(
            148.0,
            480.0, #488.0,
            anchor="nw",
            text="PCR CYCLE",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        #self.button_image_19 = PhotoImage(
        #    file=self.relative_to_assets("button_19.png"))
        self.rbtn_cycle_none = Button(self,
            image=self.img_opt_none_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_pcrcycle_none,
            command=0,
            relief="flat"
        )
        self.rbtn_cycle_none.place(
            x=355.0,
            y=473.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_16 = PhotoImage(
        #    file=self.relative_to_assets("button_16.png"))
        self.rbtn_cycle_short = Button(self,
            image=self.img_opt_short_off,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_pcrcycle_short,
            command=0,
            relief="flat"
        )
        self.rbtn_cycle_short.place(
            x=521.0,
            y=473.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_18 = PhotoImage(
        #    file=self.relative_to_assets("button_18.png"))
        self.rbtn_cycle_normal = Button(self,
            image=self.img_opt_normal_on,
            borderwidth=0,
            highlightthickness=0,
            #command=self.Cmd_btn_pcrcycle_normal,
            command=0,
            relief="flat"
        )
        self.rbtn_cycle_normal.place(
            x=688.0,
            y=473.0,
            width=140.0,
            height=70.0
        )

        #self.button_image_20 = PhotoImage(
        #    file=self.relative_to_assets("button_20.png"))
        self.button_edit = Button(self,
            image=self.button_image_edit_on,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            relief="flat"
        )
        self.button_edit.place(
            x=903.0,
            y=2.0,
            width=121.0,
            height=103.0
        )

        self.canvas.create_text(
            495.0,
            21.0, #29.0,
            anchor="nw",
            text="Total Time:",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_rectangle(
            635.0,
            25.0,
            828.0,
            69.0,
            fill="#FFFFFF",
            outline="black")

        self.id_processtime = self.canvas.create_text(
            732.0,
            43.0,
            anchor="center",
            text="00:48",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

    def update_status(self):
        # update the time
        self.canvas.itemconfig(self.id_processtime, text=self.process_setting['processtime'])

        # update options
        if self.process_setting['preextract'] == 1:
            self.rbtn_preextract_none['image']=self.img_opt_none_off
            self.rbtn_preextract_yes['image']=self.img_opt_yes_on
        elif self.process_setting['preextract'] == 0:
            self.rbtn_preextract_none['image']=self.img_opt_none_on
            self.rbtn_preextract_yes['image']=self.img_opt_yes_off

        if self.process_setting['precool'] == 1:
            self.rbtn_precool_none['image']=self.img_opt_none_off
            self.rbtn_precool_yes['image']=self.img_opt_yes_on
        elif self.process_setting['precool'] == 0:
            self.rbtn_precool_none['image']=self.img_opt_none_on
            self.rbtn_precool_yes['image']=self.img_opt_yes_off

        if self.process_setting['extracttime'] == 2:
            self.rbtn_extract_none['image']=self.img_opt_none_off
            self.rbtn_extract_short['image']=self.img_opt_short_off
            self.rbtn_extract_normal['image']=self.img_opt_normal_on
        elif self.process_setting['extracttime'] == 1:
            self.rbtn_extract_none['image']=self.img_opt_none_off
            self.rbtn_extract_short['image']=self.img_opt_short_on
            self.rbtn_extract_normal['image']=self.img_opt_normal_off
        elif self.process_setting['extracttime'] == 0:
            self.rbtn_extract_none['image']=self.img_opt_none_on
            self.rbtn_extract_short['image']=self.img_opt_short_off
            self.rbtn_extract_normal['image']=self.img_opt_normal_off

        if self.process_setting['spinrpm'] == 2:
            self.rbtn_rpm_low['image']=self.img_opt_low_off
            self.rbtn_rpm_medium['image']=self.img_opt_medium_off
            self.rbtn_rpm_high['image']=self.img_opt_high_on
        elif self.process_setting['spinrpm'] == 1:
            self.rbtn_rpm_low['image']=self.img_opt_low_off
            self.rbtn_rpm_medium['image']=self.img_opt_medium_on
            self.rbtn_rpm_high['image']=self.img_opt_high_off
        elif self.process_setting['spinrpm'] == 0:
            self.rbtn_rpm_low['image']=self.img_opt_low_on
            self.rbtn_rpm_medium['image']=self.img_opt_medium_off
            self.rbtn_rpm_high['image']=self.img_opt_high_off

        if self.process_setting['pcrcycle'] == 2:
            self.rbtn_cycle_none['image']=self.img_opt_none_off
            self.rbtn_cycle_short['image']=self.img_opt_short_off
            self.rbtn_cycle_normal['image']=self.img_opt_normal_on
        elif self.process_setting['pcrcycle'] == 1:
            self.rbtn_cycle_none['image']=self.img_opt_none_off
            self.rbtn_cycle_short['image']=self.img_opt_short_on
            self.rbtn_cycle_normal['image']=self.img_opt_normal_off
        elif self.process_setting['pcrcycle'] == 0:
            self.rbtn_cycle_none['image']=self.img_opt_none_on
            self.rbtn_cycle_short['image']=self.img_opt_short_off
            self.rbtn_cycle_normal['image']=self.img_opt_normal_off

    def Cmd_btn_preextract_none(self):
        self.process_setting['preextract'] = 0
        self.update_status()
    def Cmd_btn_preextract_yes(self):
        self.process_setting['preextract'] = 1
        self.update_status()

    def Cmd_btn_precool_none(self):
        self.process_setting['precool'] = 0
        self.update_status()
    def Cmd_btn_precool_yes(self):
        self.process_setting['precool'] = 1
        self.update_status()

    def Cmd_btn_extracttime_none(self):
        self.process_setting['extracttime'] = 0
        self.update_status()
    def Cmd_btn_extracttime_short(self):
        self.process_setting['extracttime'] = 1
        self.update_status()
    def Cmd_btn_extracttime_normal(self):
        self.process_setting['extracttime'] = 2
        self.update_status()

    def Cmd_btn_spinrpm_low(self):
        self.process_setting['spinrpm'] = 0
        self.update_status()
    def Cmd_btn_spinrpm_medium(self):
        self.process_setting['spinrpm'] = 1
        self.update_status()
    def Cmd_btn_spinrpm_high(self):
        self.process_setting['spinrpm'] = 2
        self.update_status()

    def Cmd_btn_pcrcycle_none(self):
        self.process_setting['pcrcycle'] = 0
        self.update_status()
    def Cmd_btn_pcrcycle_short(self):
        self.process_setting['pcrcycle'] = 1
        self.update_status()
    def Cmd_btn_pcrcycle_normal(self):
        self.process_setting['pcrcycle'] = 2
        self.update_status()

    def Cmd_btn_home(self):
        self.controller.show_frame(page_home.PageHome)

    def Cmd_btn_play(self):
        # pass the value of process setting
        if 1:
            self.controller.frames[page_process_play.PageProcessPlay].preextract_bar.start()
            self.controller.frames[page_process_play.PageProcessPlay].extract_bar.start()
            self.controller.frames[page_process_play.PageProcessPlay].qpcr_bar.start()

            self.controller.frames[page_process_play.PageProcessPlay].preextract_bar.toggle_pause()

            self.controller.show_frame(page_process_play.PageProcessPlay)

    def Cmd_btn_result(self):
        #self.controller.frames[page_result_list.PageResultList].update_status()
        self.controller.show_frame(page_result_list.PageResultList)

    def Cmd_btn_setting(self):
        self.controller.show_frame(page_setting.PageSetting)

if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageProcessEdit(container, window)

    window.frames[PageProcessEdit] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")


    frame.process_setting['preextract'] = 0
    frame.process_setting['precool'] = 0
    frame.process_setting['extracttime'] = 0
    frame.process_setting['spinrpm'] = 1
    frame.process_setting['pcrcycle'] = 0
    frame.update_status()

    frame.tkraise()
    window.mainloop()
    
