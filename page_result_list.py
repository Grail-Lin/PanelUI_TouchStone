
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
import time, random
from coutil import PCRResults


class PageResultList(Frame):

    # user data
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame_result_list")


    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)


    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set page data
        self.total_page = 3
        self.current_page = 1
        self.result_array = []

        # mock result data
        for j in range(15):
            result = PCRResults(timestamp=time.time()-random.randrange(0,180))
            self.result_array.append(result)

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)

        # flat background

        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.grid(row = 0, column = 0, sticky = "nsew")

        # add elements here
        '''
        self.canvas.create_rectangle(
            0.0,
            0.0,
            1024.0,
            600.0,
            fill="#FFFFFF",
            outline="")
        '''

        self.canvas.create_rectangle(
            120.0,
            0.0,
            904.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        self.image_process_off = PhotoImage(
            file=self.relative_to_assets("image_process_off.png"))
        self.button_process = Button(self,
            image=self.image_process_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )

        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        self.image_home_off = PhotoImage(
            file=self.relative_to_assets("image_home_off.png"))
        self.button_home = Button(self,
            image=self.image_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.image_setting_off = PhotoImage(
            file=self.relative_to_assets("image_setting_off.png"))
        self.button_setting = Button(self,
            image=self.image_setting_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        self.canvas.create_text(
            148.0,
            24.0,
            anchor="nw",
            text="RESULTS LIST",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0, 0.0, 1024.0, 600.0, fill="#E6EFF4", outline="")

        self.canvas.create_text(394.0, 89.0, anchor="nw",
            text="TEST ID", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.canvas.create_text(595.0, 89.0, anchor="nw",
            text="TEST NAME", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.canvas.create_text(168.0, 522.0, anchor="nw",
            text="Page 1/3", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.canvas.create_text(158.0, 89.0, anchor="nw",
            text="RUN TIME", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.image_result_on = PhotoImage(
            file=self.relative_to_assets("image_result_on.png"))
        self.button_result = Button(
            image=self.image_result_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        self.button_result.place(x=0.0, y=206.0, width=120.0, height=103.0)

        self.image_folder_on = PhotoImage(
            file=self.relative_to_assets("image_folder_on.png"))

        self.button_folder = Button(
            image=self.image_folder_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )

        self.button_folder.place(x=903.0, y=0.0, width=121.0, height=103.0)

        self.image_return_off = PhotoImage(
            file=self.relative_to_assets("image_return_off.png"))
        
        self.button_return = Button(
            image=self.image_return_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_6 clicked"),
            relief="flat"
        )
        self.button_return.place(
            x=904.0,
            y=105.0,
            width=120.0,
            height=103.0
        )

        # list of results
        self.image_empty_button = PhotoImage(
            file=self.relative_to_assets("image_empty_button.png"))

        self.image_image_1 = PhotoImage(
            file=self.relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(512.0, 153.0,
            image=self.image_image_1)

        self.image_image_2 = PhotoImage(
            file=self.relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(512.0, 213.0,
            image=self.image_image_2)

        self.image_image_3 = PhotoImage(
            file=self.relative_to_assets("image_3.png"))
        self.image_3 = self.canvas.create_image(512.0, 273.0,
            image=self.image_image_3)

        self.image_image_4 = PhotoImage(
            file=self.relative_to_assets("image_4.png"))
        self.image_4 = self.canvas.create_image(512.0, 333.0,
            image=self.image_image_4)

        self.image_image_5 = PhotoImage(
            file=self.relative_to_assets("image_5.png"))
        self.image_5 = self.canvas.create_image(512.0, 393.0,
            image=self.image_image_5)


        # result 6
        '''
        self.button_result6 = Button(self,
            image=self.image_empty_button,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button result6 clicked"),
            relief="flat"
        )
        self.button_result6.place(x=512.0, y=453.0, width=728.0, height=56.0, anchor="center")
        '''
        self.image_6 = self.canvas.create_image(512.0, 453.0,
            image=self.image_empty_button)


        self.id_r6_ts = self.canvas.create_text(168.0, 433.0, anchor="nw",
            text="2023-08-23 13:00:35", fill="#17171B", font=("Noto Sans", 20 * -1))
        self.id_r6_tid = self.canvas.create_text(394.0, 433.0, anchor="nw",
            text="1299-3377-2310", fill="#17171B", font=("Noto Sans", 20 * -1))
        self.id_r6_tname = self.canvas.create_text(595.0, 433.0, anchor="nw",
            text="Res. Panel", fill="#17171B", font=("Noto Sans", 20 * -1))


        # next btn
        self.image_next_on = PhotoImage(
            file=self.relative_to_assets("image_next_on.png"))

        self.button_next = Button(self,
            image=self.image_next_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_7 clicked"),
            relief="flat"
        )
        self.button_next.place(x=713.0, y=519.0, width=163.0, height=42.0)

        self.image_previous_on = PhotoImage(
            file=self.relative_to_assets("image_previous_on.png"))

        self.button_previous = Button(self,
            image=self.image_previous_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_8 clicked"),
            relief="flat"
        )
        self.button_previous.place(x=522.0, y=519.0, width=163.0, height=42.0)

        self.update()

    def update(self):
        # use current page and total page to modify buttons
        return

    def btn_results(self, result_data):
        print("click the results")
        return

if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageResultList(container, window)

    window.frames[PageResultList] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    window.mainloop()
    
