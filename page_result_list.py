
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
import time, random
from coutil import PCRResults


class PageResultList(Frame):

    # user data
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame_result_list")


    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)


    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set page data
        self.each_page_num = 6
        self.total_result_num = 15
        self.select_result_num = 1

        self.total_page = 3
        self.current_page = 0
        self.result_array = []

        # mock result data
        for j in range(self.total_result_num):
            result = PCRResults(timestamp=time.time()-random.randrange(0,180))
            self.result_array.append(result)

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)

        # flat background

        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.grid(row = 0, column = 0, sticky = "nsew")

        # add elements here
        self.canvas.create_rectangle(
            120.0,
            0.0,
            904.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        self.image_process_off = PhotoImage(
            file=self.relative_to_assets("image_process_off.png"))
        self.button_process = Button(self,
            image=self.image_process_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )

        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        self.image_home_off = PhotoImage(
            file=self.relative_to_assets("image_home_off.png"))
        self.button_home = Button(self,
            image=self.image_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.image_setting_off = PhotoImage(
            file=self.relative_to_assets("image_setting_off.png"))
        self.button_setting = Button(self,
            image=self.image_setting_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        self.canvas.create_text(
            148.0,
            24.0,
            anchor="nw",
            text="RESULTS LIST",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0, 0.0, 1024.0, 600.0, fill="#E6EFF4", outline="")

        self.canvas.create_text(394.0, 89.0, anchor="nw",
            text="TEST ID", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.canvas.create_text(595.0, 89.0, anchor="nw",
            text="TEST NAME", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.page_label = self.canvas.create_text(168.0, 522.0, anchor="nw",
            text="Page 1/3", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.canvas.create_text(158.0, 89.0, anchor="nw",
            text="RUN TIME", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.image_result_on = PhotoImage(
            file=self.relative_to_assets("image_result_on.png"))
        self.button_result = Button(
            image=self.image_result_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        self.button_result.place(x=0.0, y=206.0, width=120.0, height=103.0)

        self.image_folder_on = PhotoImage(
            file=self.relative_to_assets("image_folder_on.png"))

        self.button_folder = Button(
            image=self.image_folder_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )

        self.button_folder.place(x=903.0, y=0.0, width=121.0, height=103.0)

        self.image_return_off = PhotoImage(
            file=self.relative_to_assets("image_return_off.png"))
        
        self.button_return = Button(
            image=self.image_return_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_6 clicked"),
            relief="flat"
        )
        self.button_return.place(
            x=904.0,
            y=105.0,
            width=120.0,
            height=103.0
        )

        # list of results
        self.image_empty_button = PhotoImage(
            file=self.relative_to_assets("image_empty_button.png"))

        # result 1
        self.image_1 = self.canvas.create_image(512.0, 153.0,
            image=self.image_empty_button)

        self.id_r1_ts = self.canvas.create_text(168.0, 133.0, anchor="nw",
            text="2023-08-23 13:00:31", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r1_tid = self.canvas.create_text(394.0, 133.0, anchor="nw",
            text="1299-3377-2311", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r1_tname = self.canvas.create_text(595.0, 133.0, anchor="nw",
            text="Res. 1 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_1, '<Button-1>', self.btn_results_1, "")

        # result 2
        self.image_2 = self.canvas.create_image(512.0, 213.0,
            image=self.image_empty_button)

        self.id_r2_ts = self.canvas.create_text(168.0, 193.0, anchor="nw",
            text="2023-08-23 13:00:32", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r2_tid = self.canvas.create_text(394.0, 193.0, anchor="nw",
            text="1299-3377-2312", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r2_tname = self.canvas.create_text(595.0, 193.0, anchor="nw",
            text="Res. 2 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_2, '<Button-1>', self.btn_results_2, "")

        # result 3
        self.image_3 = self.canvas.create_image(512.0, 273.0,
            image=self.image_empty_button)

        self.id_r3_ts = self.canvas.create_text(168.0, 253.0, anchor="nw",
            text="2023-08-23 13:00:33", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r3_tid = self.canvas.create_text(394.0, 253.0, anchor="nw",
            text="1299-3377-2313", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r3_tname = self.canvas.create_text(595.0, 253.0, anchor="nw",
            text="Res. 3 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_3, '<Button-1>', self.btn_results_3, "")

        # result 4
        self.image_4 = self.canvas.create_image(512.0, 333.0,
            image=self.image_empty_button)

        self.id_r4_ts = self.canvas.create_text(168.0, 313.0, anchor="nw",
            text="2023-08-23 13:00:34", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r4_tid = self.canvas.create_text(394.0, 313.0, anchor="nw",
            text="1299-3377-2314", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r4_tname = self.canvas.create_text(595.0, 313.0, anchor="nw",
            text="Res. 4 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_4, '<Button-1>', self.btn_results_4, "")

        # result 5
        self.image_5 = self.canvas.create_image(512.0, 393.0,
            image=self.image_empty_button)

        self.id_r5_ts = self.canvas.create_text(168.0, 373.0, anchor="nw",
            text="2023-08-23 13:00:35", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r5_tid = self.canvas.create_text(394.0, 373.0, anchor="nw",
            text="1299-3377-2315", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r5_tname = self.canvas.create_text(595.0, 373.0, anchor="nw",
            text="Res. 5 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_5, '<Button-1>', self.btn_results_5, "")

        # result 6
        self.image_6 = self.canvas.create_image(512.0, 453.0,
            image=self.image_empty_button)

        self.id_r6_ts = self.canvas.create_text(168.0, 433.0, anchor="nw",
            text="2023-08-23 13:00:36", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r6_tid = self.canvas.create_text(394.0, 433.0, anchor="nw",
            text="1299-3377-2316", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r6_tname = self.canvas.create_text(595.0, 433.0, anchor="nw",
            text="Res. 6 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_6, '<Button-1>', self.btn_results_6, "")


        # next btn
        self.image_next_on = PhotoImage(
            file=self.relative_to_assets("image_next_on.png"))

        self.button_next = Button(self,
            image=self.image_next_on,
            borderwidth=0,
            highlightthickness=0,
            command=self.cmd_btn_next,
            relief="flat"
        )
        self.button_next.place(x=713.0, y=519.0, width=163.0, height=42.0)

        self.image_previous_on = PhotoImage(
            file=self.relative_to_assets("image_previous_on.png"))

        self.button_previous = Button(self,
            image=self.image_previous_on,
            borderwidth=0,
            highlightthickness=0,
            command=self.cmd_btn_previous,
            relief="flat"
        )
        self.button_previous.place(x=522.0, y=519.0, width=163.0, height=42.0)

        self.update()

    def cmd_btn_next(self):
        self.current_page = self.current_page + 1
        self.update()
        return

    def cmd_btn_previous(self):
        self.current_page = self.current_page - 1
        self.update()
        return

    def hide_all(self):
        self.canvas.itemconfigure(self.image_1, state="hidden")
        self.canvas.itemconfigure(self.id_r1_ts, state="hidden")
        self.canvas.itemconfigure(self.id_r1_tid, state="hidden")
        self.canvas.itemconfigure(self.id_r1_tname, state="hidden")
        self.canvas.itemconfigure(self.image_2, state="hidden")
        self.canvas.itemconfigure(self.id_r2_ts, state="hidden")
        self.canvas.itemconfigure(self.id_r2_tid, state="hidden")
        self.canvas.itemconfigure(self.id_r2_tname, state="hidden")
        self.canvas.itemconfigure(self.image_3, state="hidden")
        self.canvas.itemconfigure(self.id_r3_ts, state="hidden")
        self.canvas.itemconfigure(self.id_r3_tid, state="hidden")
        self.canvas.itemconfigure(self.id_r3_tname, state="hidden")
        self.canvas.itemconfigure(self.image_4, state="hidden")
        self.canvas.itemconfigure(self.id_r4_ts, state="hidden")
        self.canvas.itemconfigure(self.id_r4_tid, state="hidden")
        self.canvas.itemconfigure(self.id_r4_tname, state="hidden")
        self.canvas.itemconfigure(self.image_5, state="hidden")
        self.canvas.itemconfigure(self.id_r5_ts, state="hidden")
        self.canvas.itemconfigure(self.id_r5_tid, state="hidden")
        self.canvas.itemconfigure(self.id_r5_tname, state="hidden")
        self.canvas.itemconfigure(self.image_6, state="hidden")
        self.canvas.itemconfigure(self.id_r6_ts, state="hidden")
        self.canvas.itemconfigure(self.id_r6_tid, state="hidden")
        self.canvas.itemconfigure(self.id_r6_tname, state="hidden")
        return

    def update(self):
        # update page
        temp_str = "Page %d/%d" % (self.current_page+1, self.total_page)
        self.canvas.itemconfigure(self.page_label, text=temp_str)

        # hide all result button
        self.hide_all()
		
        # use current page and total page to modify buttons text
        first_result_num = self.current_page * self.each_page_num
        
        for jj in range(self.each_page_num):
            target_result_num = first_result_num + jj
            if target_result_num < self.total_result_num:
                target_result = self.result_array[target_result_num]
                if jj == 0:
                    self.canvas.itemconfigure(self.image_1, state="normal")
                    self.canvas.itemconfigure(self.id_r1_ts, state="normal")
                    self.canvas.itemconfigure(self.id_r1_tid, state="normal")
                    self.canvas.itemconfigure(self.id_r1_tname, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r1_ts, text=timestamp_str)
                    self.canvas.itemconfigure(self.id_r1_tid, text=target_result.test_id)
                    self.canvas.itemconfigure(self.id_r1_tname, text=target_result.test_name)
                elif jj == 1:
                    self.canvas.itemconfigure(self.image_2, state="normal")
                    self.canvas.itemconfigure(self.id_r2_ts, state="normal")
                    self.canvas.itemconfigure(self.id_r2_tid, state="normal")
                    self.canvas.itemconfigure(self.id_r2_tname, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r2_ts, text=timestamp_str)
                    self.canvas.itemconfigure(self.id_r2_tid, text=target_result.test_id)
                    self.canvas.itemconfigure(self.id_r2_tname, text=target_result.test_name)
                elif jj == 2:
                    self.canvas.itemconfigure(self.image_3, state="normal")
                    self.canvas.itemconfigure(self.id_r3_ts, state="normal")
                    self.canvas.itemconfigure(self.id_r3_tid, state="normal")
                    self.canvas.itemconfigure(self.id_r3_tname, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r3_ts, text=timestamp_str)
                    self.canvas.itemconfigure(self.id_r3_tid, text=target_result.test_id)
                    self.canvas.itemconfigure(self.id_r3_tname, text=target_result.test_name)
                elif jj == 3:
                    self.canvas.itemconfigure(self.image_4, state="normal")
                    self.canvas.itemconfigure(self.id_r4_ts, state="normal")
                    self.canvas.itemconfigure(self.id_r4_tid, state="normal")
                    self.canvas.itemconfigure(self.id_r4_tname, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r4_ts, text=timestamp_str)
                    self.canvas.itemconfigure(self.id_r4_tid, text=target_result.test_id)
                    self.canvas.itemconfigure(self.id_r4_tname, text=target_result.test_name)
                elif jj == 4:
                    self.canvas.itemconfigure(self.image_5, state="normal")
                    self.canvas.itemconfigure(self.id_r5_ts, state="normal")
                    self.canvas.itemconfigure(self.id_r5_tid, state="normal")
                    self.canvas.itemconfigure(self.id_r5_tname, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r5_ts, text=timestamp_str)
                    self.canvas.itemconfigure(self.id_r5_tid, text=target_result.test_id)
                    self.canvas.itemconfigure(self.id_r5_tname, text=target_result.test_name)
                elif jj == 5:
                    self.canvas.itemconfigure(self.image_6, state="normal")
                    self.canvas.itemconfigure(self.id_r6_ts, state="normal")
                    self.canvas.itemconfigure(self.id_r6_tid, state="normal")
                    self.canvas.itemconfigure(self.id_r6_tname, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r6_ts, text=timestamp_str)
                    self.canvas.itemconfigure(self.id_r6_tid, text=target_result.test_id)
                    self.canvas.itemconfigure(self.id_r6_tname, text=target_result.test_name)

        # if there is more page, let next btn on
        self.button_next['state']="normal"
        if self.current_page == (self.total_page - 1):
            self.button_next['state']="disabled"
        # if there is not the first page, let the previous btn on
        self.button_previous['state']="normal"
        if self.current_page == 0:
            self.button_previous['state']="disabled"

        return

    def btn_result(self, result_data):
        return

    def btn_results_1(self, click_data):
        print("click the results: 1, click_data: %s" % click_data)
        # select correct result_data
        result_data = PCRResults()
        self.btn_result(result_data)
        return
    def btn_results_2(self, click_data):
        print("click the results: 2, click_data: %s" % click_data)
        # select correct result_data
        result_data = PCRResults()
        self.btn_result(result_data)
        return
    def btn_results_3(self, click_data):
        print("click the results: 3, click_data: %s" % click_data)
        # select correct result_data
        result_data = PCRResults()
        self.btn_result(result_data)
        return
    def btn_results_4(self, click_data):
        print("click the results: 4, click_data: %s" % click_data)
        # select correct result_data
        result_data = PCRResults()
        self.btn_result(result_data)
        return
    def btn_results_5(self, click_data):
        print("click the results: 5, click_data: %s" % click_data)
        # select correct result_data
        result_data = PCRResults()
        self.btn_result(result_data)
        return
    def btn_results_6(self, click_data):
        print("click the results: 6, click_data: %s" % click_data)
        # select correct result_data
        result_data = PCRResults()
        self.btn_result(result_data)
        return

if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageResultList(container, window)

    window.frames[PageResultList] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    window.mainloop()
    
