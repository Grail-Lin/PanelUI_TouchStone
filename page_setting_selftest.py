
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, StringVar

import random, string, time

import page_process_play
import page_home
import page_process_edit
import page_result_list
import page_setting

from copic import img_button_play_out, img_button_edit_out, img_button_stop_out
from copic import img_button_play_off, img_button_edit_off, img_button_stop_off
from copic import img_button_process_off, img_button_home_off, img_button_result_off, img_button_setting_on
from copic import img_button_insert_on, img_button_insert_off
from copic import img_button_eject_on, img_button_eject_off
from copic import img_state_aborted, img_state_completed, img_state_not_started
from copic import img_btn_start_off, img_btn_start_on

class PageSettingSelftest(Frame):


    # process status
    # 0: not started, no cartridge
    # 1: completed
    # -1: error
    # 2: not started, with cartridge

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)


        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        self.canvas.place(x = 0, y = 0)

        # add elements here
        self.canvas.create_rectangle(120.0, 0.0, 904.0, 600.0, fill="#F9F9F9", outline="")

        self.button_image_setting_on = PhotoImage(data=img_button_setting_on)
        self.button_setting = Button(self, image=self.button_image_setting_on, 
                                     borderwidth=0, highlightthickness=0,
                                     command=self.Cmd_btn_setting,
                                     relief="flat")
        self.button_setting.place(x=0.0, y=497.0, width=120.0, height=103.0)

        self.button_image_home_off = PhotoImage(data=img_button_home_off)
        self.button_home = Button(self, image=self.button_image_home_off,
                                  borderwidth=0, highlightthickness=0,
                                  command=self.Cmd_btn_home,
                                  relief="flat")
        self.button_home.place(x=0.0, y=0.0, width=120.0, height=103.0)

        self.button_image_process_off = PhotoImage(data=img_button_process_off)
        self.button_process = Button(self, image=self.button_image_process_off,
                                     borderwidth=0, highlightthickness=0,
                                     command=lambda: print("button_1 clicked"),
                                     relief="flat")
        self.button_process.place(x=0.0, y=103.0, width=120.0, height=103.0)

        self.canvas.create_text(
            148.0,
            24.0,
            anchor="nw",
            text="SETTINGS / SELF-TEST",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1)
        )

        self.canvas.create_rectangle(
            904.0, 0.0,
            1024.0, 600.0,
            fill="#E6EFF4",
            outline="")




        self.button_image_play_out = PhotoImage(data=img_button_play_out)
        self.button_image_edit_out = PhotoImage(data=img_button_edit_out)
        self.button_image_stop_out = PhotoImage(data=img_button_stop_out)




        self.button_image_result_off = PhotoImage(data=img_button_result_off)
        self.button_result = Button(self, image=self.button_image_result_off,
                                    borderwidth=0, highlightthickness=0,
                                    command=self.Cmd_btn_result,
                                    relief="flat")
        self.button_result.place(x=0.0, y=206.0, width=120.0, height=103.0)


        self.button_image_play_off = PhotoImage(data=img_button_play_off)
        self.button_play = Button(self, image=self.button_image_play_off,
                                  borderwidth=0, highlightthickness=0,
                                  command=self.Cmd_btn_play,
                                  relief="flat")
        #self.button_play.place(x=938.0, y=140.0, width=52.0, height=52.0)
        self.button_play.place(x=903.0, y=105.0, width=121.0, height=103.0)

        self.button_image_stop_off = PhotoImage(data=img_button_stop_off)
        self.button_stop = Button(self, image=self.button_image_stop_off,
                             borderwidth=0, highlightthickness=0,
                             command=lambda: print("button_6 clicked"),
                             relief="flat")
        #self.button_stop.place(x=938.0, y=243.0, width=52.0, height=52.0)
        self.button_stop.place(x=903.0, y=208.0, width=121.0, height=103.0)
        self.button_image_edit_off = PhotoImage(data=img_button_edit_off)
        self.button_edit = Button(self, image=self.button_image_edit_off,
                                  borderwidth=0, highlightthickness=0,
                                  command=self.Cmd_btn_edit,
                                  relief="flat")
        #self.button_edit.place(x=938.0, y=37.0, width=52.0, height=52.0)
        self.button_edit.place(x=903.0, y=2.0, width=121.0, height=103.0)

        # button_6
        # button_7
        # button_8
        # button_9
        # button_10
        self.img_btn_start_off = PhotoImage(data=img_btn_start_off)
        self.button_start_01 = Button(self, image=self.img_btn_start_off,
                                      borderwidth=0, highlightthickness=0,
                                      command=lambda: print("button_10 clicked"),
                                      relief="flat")
        self.button_start_01.place(x=354.0, y=96.0, width=200.0, height=70.0)


        # button_11
        self.img_btn_start_on = PhotoImage(data=img_btn_start_on)
        self.button_start_02 = Button(self, image=self.img_btn_start_on,
                                      borderwidth=0, highlightthickness=0,
                                      command=lambda: print("button_11 clicked"),
                                      relief="flat")
        self.button_start_02.place(x=354.0, y=191.0, width=200.0, height=70.0)

        # fix labels
        self.canvas.create_text(
            148.0,
            113.0,
            anchor="nw",
            text="HEATER TEST",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            582.0,
            210.0,    # 229.0
            anchor="nw",
            text="Started...10%",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            582.0,
            114.0,     # 330.0
            anchor="nw",
            text="Passed",
            fill="#1ACE8D",
            font=("Noto Sans", 24 * -1)
        )


        self.canvas.create_text(
            148.0,
            208.0,     # 29.0
            anchor="nw",
            text="MOTION TEST",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

    def Cmd_btn_home(self):
        self.controller.show_frame(page_home.PageHome)

    def Cmd_btn_edit(self):
        # pass the value of process setting
        if self.process_status == 2:
            self.controller.frames[page_process_edit.PageProcessEdit].process_setting = self.process_setting
            self.controller.frames[page_process_edit.PageProcessEdit].update_status()
            self.controller.show_frame(page_process_edit.PageProcessEdit)

    def Cmd_btn_play(self):
        # pass the value of process setting
        print("process_status: " + str(self.process_status))
        if self.process_status == 2:
            #self.controller.frames[page_process_play.PageProcessPlay].process_setting = self.process_setting
            #self.controller.frames[page_process_play.PageProcessPlay].update_status()
            
            self.controller.frames[page_process_play.PageProcessPlay].preextract_bar.start()
            self.controller.frames[page_process_play.PageProcessPlay].extract_bar.start()
            self.controller.frames[page_process_play.PageProcessPlay].qpcr_bar.start()
            '''
            self.controller.frames[page_process_play.PageProcessPlay].preextract_bar.toggle_pause()
            '''
            self.controller.frames[page_process_play.PageProcessPlay].step()
            self.controller.show_frame(page_process_play.PageProcessPlay)

    def Cmd_btn_result(self):
        self.controller.frames[page_result_list.PageResultList].fetchResults()
        self.controller.show_frame(page_result_list.PageResultList)

    def Cmd_btn_setting(self):
        self.controller.show_frame(page_setting.PageSetting)

if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageSettingSelftest(container, window)

    window.frames[PageSettingSelftest] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")
    frame.tkraise()
    window.mainloop()






'''
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\CO_BT\20230718_UI\PanelTDVersion\build\assets\frame2")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1024x600")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 600,
    width = 1024,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    1024.0,
    600.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    120.0,
    0.0,
    904.0,
    600.0,
    fill="#F9F9F9",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=0.0,
    y=497.0,
    width=120.0,
    height=103.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=0.0,
    y=0.0,
    width=120.0,
    height=103.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=0.0,
    y=103.0,
    width=120.0,
    height=103.0
)

canvas.create_text(
    148.0,
    24.0,
    anchor="nw",
    text="SETTINGS / SELF-TEST",
    fill="#569FCB",
    font=("Noto Sans", 32 * -1)
)

canvas.create_rectangle(
    904.0,
    0.0,
    1024.0,
    600.0,
    fill="#E6EFF4",
    outline="")

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
)
button_4.place(
    x=943.0,
    y=524.0,
    width=41.8603515625,
    height=50.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=0.0,
    y=206.0,
    width=120.0,
    height=103.0
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_6 clicked"),
    relief="flat"
)
button_6.place(
    x=938.0,
    y=131.0,
    width=52.0,
    height=52.00244140625
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_7 clicked"),
    relief="flat"
)
button_7.place(
    x=938.0,
    y=28.0,
    width=52.0,
    height=52.0
)

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_8 clicked"),
    relief="flat"
)
button_8.place(
    x=939.0,
    y=420.0,
    width=52.0,
    height=52.0
)

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_9 clicked"),
    relief="flat"
)
button_9.place(
    x=903.0,
    y=208.0,
    width=121.0,
    height=103.0
)

canvas.create_text(
    148.0,
    113.0,
    anchor="nw",
    text="HEATER TEST",
    fill="#7D8CA7",
    font=("Noto Sans", 24 * -1)
)

canvas.create_text(
    582.0,
    210.0,
    anchor="nw",
    text="Started...10%",
    fill="#7D8CA7",
    font=("Noto Sans", 24 * -1)
)

canvas.create_text(
    582.0,
    114.0,
    anchor="nw",
    text="Passed",
    fill="#1ACE8D",
    font=("Noto Sans", 24 * -1)
)

button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
button_10 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_10 clicked"),
    relief="flat"
)
button_10.place(
    x=354.0,
    y=96.0,
    width=200.0,
    height=70.0
)

canvas.create_text(
    148.0,
    208.0,
    anchor="nw",
    text="MOTION TEST",
    fill="#7D8CA7",
    font=("Noto Sans", 24 * -1)
)

button_image_11 = PhotoImage(
    file=relative_to_assets("button_11.png"))
button_11 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_11 clicked"),
    relief="flat"
)
button_11.place(
    x=354.0,
    y=191.0,
    width=200.0,
    height=70.0
)
window.resizable(False, False)
window.mainloop()
'''
'''
    def update_status(self):
        if self.process_status == 0:
            # update status image
            self.canvas.itemconfig(self.image_state, image = self.image_state_not_started)

            # update frame color
            self.canvas.itemconfig(self.frame_cartridgeID, fill="#EBEBEB")
            self.canvas.itemconfig(self.frame_testname, fill="#EBEBEB")
            self.canvas.itemconfig(self.frame_processtime, fill="#EBEBEB")

            # empty text values
            self.canvas.itemconfig(self.id_cartridgeID, text=self.str_cartridgeID.get())
            self.canvas.itemconfig(self.id_testname, text=self.str_testname.get())
            self.canvas.itemconfig(self.id_processtime, text="")

            # update btn image
            self.button_insert['image']=self.button_image_insert_on
            self.button_eject['image']=self.button_image_eject_off
            self.button_insert['command']=self.Cmd_btn_insert
            self.button_eject['command']=0

            # update edit/play/stop image
            self.button_edit['image']=self.button_image_edit_off
            self.button_play['image']=self.button_image_play_off
            self.button_stop['image']=self.button_image_stop_off

        elif self.process_status == 1:
            self.canvas.itemconfig(self.image_state, image = self.image_state_completed)

            # update frame color
            self.canvas.itemconfig(self.frame_cartridgeID, fill="#FFFFFF")
            self.canvas.itemconfig(self.frame_testname, fill="#FFFFFF")
            self.canvas.itemconfig(self.frame_processtime, fill="#FFFFFF")

            # update text values
            self.canvas.itemconfig(self.id_cartridgeID, text=self.str_cartridgeID.get())
            self.canvas.itemconfig(self.id_testname, text=self.str_testname.get())
            self.canvas.itemconfig(self.id_processtime, text=self.str_processtime.get())

            # update btn image
            self.button_insert['image']=self.button_image_insert_off
            self.button_eject['image']=self.button_image_eject_on
            self.button_insert['command']=0
            self.button_eject['command']=self.Cmd_btn_eject

            # update edit/play/stop image
            self.button_edit['image']=self.button_image_edit_out
            self.button_play['image']=self.button_image_play_out
            self.button_stop['image']=self.button_image_stop_out

        elif self.process_status == -1:
            self.canvas.itemconfig(self.image_state, image = self.image_state_aborted)

            # update frame color
            self.canvas.itemconfig(self.frame_cartridgeID, fill="#FFFFFF")
            self.canvas.itemconfig(self.frame_testname, fill="#FFFFFF")
            self.canvas.itemconfig(self.frame_processtime, fill="#FFFFFF")

            # update text values
            self.canvas.itemconfig(self.id_cartridgeID, text=self.str_cartridgeID.get())
            self.canvas.itemconfig(self.id_testname, text=self.str_testname.get())
            self.canvas.itemconfig(self.id_processtime, text=self.str_processtime.get())

            # update btn image
            self.button_insert['image']=self.button_image_insert_off
            self.button_eject['image']=self.button_image_eject_on
            self.button_insert['command']=0
            self.button_eject['command']=self.Cmd_btn_eject

            # update edit/play/stop image
            self.button_edit['image']=self.button_image_edit_out
            self.button_play['image']=self.button_image_play_out
            self.button_stop['image']=self.button_image_stop_out

        elif self.process_status == 2:
            # inserted but not process yet
            self.canvas.itemconfig(self.image_state, image = self.image_state_not_started)

            # update frame color
            self.canvas.itemconfig(self.frame_cartridgeID, fill="#FFFFFF")
            self.canvas.itemconfig(self.frame_testname, fill="#FFFFFF")
            self.canvas.itemconfig(self.frame_processtime, fill="#FFFFFF")

            # update text values
            self.canvas.itemconfig(self.id_cartridgeID, text=self.str_cartridgeID.get())
            self.canvas.itemconfig(self.id_testname, text=self.str_testname.get())
            self.canvas.itemconfig(self.id_processtime, text=self.str_processtime.get())

            # update btn image
            self.button_insert['image']=self.button_image_insert_off
            self.button_eject['image']=self.button_image_eject_on
            self.button_insert['command']=0
            self.button_eject['command']=self.Cmd_btn_eject

            # update edit/play/stop image
            self.button_edit['image']=self.button_image_edit_off
            self.button_play['image']=self.button_image_play_off
            self.button_stop['image']=self.button_image_stop_off

    # btn insert cartridge
    def Cmd_btn_insert(self):
        # open cartridge
        # read QR code to get id and test name
        temp_string = ''.join(random.choice(string.digits) for x in range(4))  \
            +'-'+''.join(random.choice(string.digits) for x in range(4))       \
            +'-'+''.join(random.choice(string.digits) for x in range(4))
        self.str_cartridgeID.set(temp_string)

        temp_string = ''.join(random.choice(string.ascii_letters + string.digits) for x in range(10)) + " Test"
        self.str_testname.set(temp_string)


        #self.var_preextracttime = random.randrange(10,180)
        #self.var_extracttime = random.randrange(10,240)
        #self.var_qpcrtime = random.randrange(10,180)

        #self.var_processtime = self.var_preextracttime+ self.var_extracttime + self.var_qpcrtime
        #self.str_processtime.set(time.strftime("%M:%S", time.gmtime(self.var_processtime)))


        # set the time for play page
        # self.controller.frames[page_process_play.PageProcessPlay].preextract_bar.reset(self.var_preextracttime)
        # self.controller.frames[page_process_play.PageProcessPlay].extract_bar.reset(self.var_extracttime)
        # self.controller.frames[page_process_play.PageProcessPlay].qpcr_bar.reset(self.var_qpcrtime)

        # init all step setting
        all_steps_setting = []
        self.controller.frames[page_process_play.PageProcessPlay].initial_step_array(all_steps_setting)


        self.var_preextracttime = self.controller.frames[page_process_play.PageProcessPlay].preextract_bar.total_time
        self.var_extracttime = self.controller.frames[page_process_play.PageProcessPlay].extract_bar.total_time
        self.var_qpcrtime = self.controller.frames[page_process_play.PageProcessPlay].qpcr_bar.total_time

        self.var_processtime = self.var_preextracttime+ self.var_extracttime + self.var_qpcrtime
        self.str_processtime.set(time.strftime("%M:%S", time.gmtime(self.var_processtime)))

        self.process_setting['preextract'] = random.randrange(0,2)
        self.process_setting['precool'] = random.randrange(0,2)
        self.process_setting['extracttime'] = random.randrange(0,3)
        self.process_setting['spinrpm'] = random.randrange(0,3)
        self.process_setting['pcrcycle'] = random.randrange(0,3)
        self.process_setting['processtime'] = self.str_processtime.get()

        self.process_status = 2
        self.update_status()


        return
    # btn eject cartridge
    def Cmd_btn_eject(self):
        # empty id and test name
        self.str_cartridgeID.set("")

        self.str_testname.set("")

        self.str_processtime.set("")

        self.process_status = 0
        self.update_status()
        return
'''
