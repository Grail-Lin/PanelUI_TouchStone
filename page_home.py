
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
import page_process_init
import page_result_list
import page_setting
import page_result_chart

from copic import img_button_home_on, img_button_process_off, img_button_setting_off, img_button_result_off
from copic import img_co_logo, img_button_home_result, img_button_home_test

class PageHome(Frame):

    # user data

    #OUTPUT_PATH = Path(__file__).parent
    #ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame_home")

    #def relative_to_assets(self, path: str) -> Path:
    #    return self.ASSETS_PATH / Path(path)

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)

        # add elements here
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        
        self.canvas.place(x = 0, y = 0)

        self.img_button_home_on = PhotoImage(data=img_button_home_on)
        self.button_home = Button(self,
            image=self.img_button_home_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_home clicked"),
            bg="#F9F9F9",
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.img_button_process_off = PhotoImage(data = img_button_process_off)
        self.button_process = Button(self,
            image=self.img_button_process_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_process,  #lambda: print("button_process clicked"),
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )


        self.img_button_result_off = PhotoImage(data = img_button_result_off)
        self.button_result = Button(self,
            image=self.img_button_result_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_result,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_result.place(
            x=0.0,
            y=206.0,
            width=120.0,
            height=103.0
        )

        self.img_button_setting_off = PhotoImage(data = img_button_setting_off)
        self.button_setting = Button(self,
            image=self.img_button_setting_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_setting,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        # button for test/result
        self.img_button_home_test = PhotoImage(data = img_button_home_test)
        self.button_home_test = Button(self,
            image=self.img_button_home_test,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_process,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_home_test.place(
            x=148.0,
            y=103.0,
            width=350.0,
            height=388.0
        )

        self.img_button_home_result = PhotoImage(data = img_button_home_result)
        self.button_home_result = Button(self,
            image=self.img_button_home_result,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_result,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_home_result.place(
            x=526.0,
            y=103.0,
            width=350.0,
            height=388.0
        )








        self.canvas.create_rectangle(
            120.0,
            0.0,
            904.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        self.canvas.create_text(
            148.0,
            16.0,
            anchor="nw",
            text="HOME",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0,
            0.0,
            1024.0,
            600.0,
            fill="#E6EFF4",
            outline="")

        # logo
        self.img_co_logo = PhotoImage(data = img_co_logo)
        self.canvas.create_image(964.0, 549.0, image=self.img_co_logo)


    def Cmd_btn_process(self):
        # need to check if there is cartridge inside
        #self.controller.frames[page_process_init.PageProcessInit].status = 0
        self.controller.frames[page_process_init.PageProcessInit].update_status()
        self.controller.show_frame(page_process_init.PageProcessInit)

    def Cmd_btn_result(self):
        # fetch results
        self.controller.frames[page_result_list.PageResultList].fetchResults()
        # show result list
        # self.controller.show_frame(page_result_list.PageResultList)

        # show the last one result
        target_result = self.controller.frames[page_result_list.PageResultList].result_array[-1]
        self.controller.frames[page_result_chart.PageResultChart].pcrresults = target_result
        self.controller.frames[page_result_chart.PageResultChart].update()
        self.controller.show_frame(page_result_chart.PageResultChart)


    def Cmd_btn_setting(self):
        self.controller.show_frame(page_setting.PageSetting)

if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageHome(container, window)

    window.frames[PageHome] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    window.mainloop()
    



