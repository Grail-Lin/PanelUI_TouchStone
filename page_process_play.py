
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
import page_check
import time

from circle_bar import CircularProgressbar

from copic import img_button_process_on, img_button_home_off, img_button_result_off, img_button_setting_off
from copic import img_button_stop_off, img_button_edit_out, img_button_play_on
import page_result_chart, page_process_init

# PCB module
import copcb
import coutil
import random

class PageProcessPlay(Frame):

    # user data

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data
        self.play_after = None

        # set pcb boards

        self.steps_preextract = []
        self.steps_extract = []
        self.steps_qpcr = []

        self.paras_preextract = []
        self.paras_extract = []
        self.paras_qpcr = []

        self.paras_config = []
        
        # initial all pcb here
 
        self.step_array = []

        self.len_preextract = 0
        self.len_extract = 0
        self.len_qpcr = 0

        # self.preextract_steps = step_array[:self.len_preextract]
        # self.extract_steps = step_array[self.len_preextract:self.len_preextract+self.len_extract]
        # self.qpcr_steps = step_array[-self.len_qpcr:]
        #self.preextract_steps = []
        #self.extract_steps = []
        #self.qpcr_steps = []

        self.cur_step_num = 0
        self.cur_step_ctime = 0 # check time

        #

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)

        
        # flat background
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        self.canvas.grid(row = 0, column = 0, sticky = "nsew")

        # add elements here
        self.canvas.create_rectangle(
            117.0,
            0.0,
            901.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        self.button_image_process_on = PhotoImage(data=img_button_process_on)
        self.button_process = Button(self,
            image=self.button_image_process_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )
        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        self.button_image_home_off = PhotoImage(data=img_button_home_off)
        self.button_home = Button(self,
            image=self.button_image_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.button_image_result_off = PhotoImage(data=img_button_result_off)
        self.button_result = Button(self,
            image=self.button_image_result_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )
        self.button_result.place(
            x=0.0,
            y=206.0,
            width=120.0,
            height=103.0
        )

        self.button_image_setting_off = PhotoImage(data=img_button_setting_off)
        self.button_setting = Button(self,
            image=self.button_image_setting_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        self.canvas.create_text(
            148.0,
            16.0, #24.0,
            anchor="nw",
            text="PROCESS",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0,
            0.0,
            1024.0,
            600.0,
            fill="#E6EFF4",
            outline="")

        self.button_image_stop_off = PhotoImage(data=img_button_stop_off)
        self.button_stop = Button(self, image=self.button_image_stop_off,
                             borderwidth=0, highlightthickness=0,
                             command=self.Cmd_btn_stop,
                             relief="flat")
        #self.button_stop.place(x=938.0, y=243.0, width=52.0, height=52.0)
        self.button_stop.place(x=903.0, y=208.0, width=121.0, height=103.0)
        self.button_image_edit_out = PhotoImage(data=img_button_edit_out)
        self.button_edit = Button(self, image=self.button_image_edit_out,
                                  borderwidth=0, highlightthickness=0,
                                  command=0,
                                  relief="flat")
        #self.button_edit.place(x=938.0, y=37.0, width=52.0, height=52.0)
        self.button_edit.place(x=903.0, y=2.0, width=121.0, height=103.0)


        self.button_image_play_on = PhotoImage(data=img_button_play_on)
        self.button_play = Button(self,
            image=self.button_image_play_on,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            relief="flat"
        )
        self.button_play.place(
            x=903.0,
            y=103.0,
            width=121.0,
            height=104.0
        )

        self.preextract_bar = CircularProgressbar(self.canvas, 178, 162, 378, 362, 20, start_ang=90, clockwise=1, fg="#CECECE", bg="#569FCB", fill="#FFFFFF", total_time=10)
        self.extract_bar = CircularProgressbar(self.canvas, 404, 162, 604, 362, 20, start_ang=90, clockwise=1, fg="#CECECE", bg="#569FCB", fill="#FFFFFF", total_time=20)
        self.qpcr_bar = CircularProgressbar(self.canvas, 630, 162, 830, 362, 20, start_ang=90, clockwise=1, fg="#CECECE", bg="#569FCB", fill="#FFFFFF", total_time=30)

        self.preextract_bar.add_next_bar(self.extract_bar)
        self.extract_bar.add_next_bar(self.qpcr_bar)

        self.current_bar = self.preextract_bar

        # title of circles
        self.canvas.create_text(
            277.0,
            133.0, #123.0,
            anchor="center",
            text="PRE-EXTRACT",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            511.0,
            133.0, #123.0,
            anchor="center",
            text="EXTRACT",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            729.0,
            133.0, #123.0,
            anchor="center",
            text="QPCR",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        # botton of circle
        self.text_preext = self.canvas.create_text(
            277.0,
            385.0, #375.0,
            anchor="center",
            text="2 / 2 STEPS",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.text_ext = self.canvas.create_text(
            503.0,
            385.0, #375.0,
            anchor="center",
            text="5 / 8 STEPS",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.text_qpcr = self.canvas.create_text(
            729.0,
            385.0, #375.0,
            anchor="center",
            #623.0,
            #367.0, #375.0,
            #anchor="nw",
            text="0 / 40 CYCLES",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )
        
        

        # middle of circle
        self.canvas.create_text(
            427.0,
            21.0, #29.0,
            anchor="nw",
            text="Time Remaining?",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_rectangle(
            635.0,
            25.0,
            828.0,
            69.0,
        fill="#FFFFFF",
        outline="black")

        self.remain_time_id = self.canvas.create_text(
            732.0,
            43.0,
            anchor="center",
            text="00:48",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        #self.canvas.after(1000, self.step)


    def Cmd_btn_stop(self):
        # hold the process for hardware
        '''
        self.preextract_bar.running = False
        self.extract_bar.running = False
        self.qpcr_bar.running = False

        if self.preextract_bar.running == True:
            self.preextract_bar.toggle_pause()
            self.current_bar = self.preextract_bar
        elif self.extract_bar.running == True:
            self.extract_bar.toggle_pause()
            self.current_bar = self.extract_bar
        elif self.qpcr_bar.running == True:
            self.qpcr_bar.toggle_pause()
            self.current_bar = self.qpcr_bar
        '''
        if self.play_after is not None:
            self.canvas.after_cancel(self.play_after)

        self.controller.show_frame(page_check.PageCheck)

    def step(self):
 
        '''
        1, check current stage
        2, call current stage pcb
           *todo* perform pcb function
        3, update the remaining time
        4, update bars

        5, check the temperature to control 

        '''

        # check cur_step_num is not the last
        #     check if need wait
        #     if not, perform cur_step
        #     if yes, wait until time count down
        #     perform check system temperature
        # if yes, go to finish report

        print("==== cur_step_num = %d ====" % self.cur_step_num)
		
        if self.cur_step_num == 0:
            todo_step = self.step_array[self.cur_step_num]
            todo_step.doFunc()
            self.cur_step_num += 1
        
        elif len(self.step_array) > self.cur_step_num:
            print("==== step_array(%d) > cur_step_num(%d) ====" % (len(self.step_array), self.cur_step_num))
            if self.step_array[self.cur_step_num-1].wait_time != None:
                print("step_array[%d].wait_time = %d" % (self.cur_step_num-1, self.step_array[self.cur_step_num-1].wait_time))
                if time.time() >= self.step_array[self.cur_step_num-1].wait_time:
                    print("time.time() > wait_time, time.time() = %f" % time.time())
                    # do current step
                    todo_step = self.step_array[self.cur_step_num]
                    todo_step.doFunc()
                    self.cur_step_num += 1
                else:
                    print("step_array[%d].wait_time = %d" % (self.cur_step_num-1, self.step_array[self.cur_step_num-1].wait_time))
                    # check if repeat
                    # do current-1 step
                    todo_step = self.step_array[self.cur_step_num-1]
                    todo_step.rtime -= 1
                    if todo_step.repeat == 1:
                        todo_step.doFunc()
                    
            else:
                print("step_array[%d].wait_time = None" % (self.cur_step_num-1))

                # do current step
                todo_step = self.step_array[self.cur_step_num]
                todo_step.doFunc()
                self.cur_step_num += 1
        else:
            # finish processing
            # generate results
            self.canvas.after_cancel(self.play_after)
            self.controller.frames[page_process_init.PageProcessInit].process_status = 1
            self.controller.frames[page_process_init.PageProcessInit].update_status()
            self.controller.show_frame(page_process_init.PageProcessInit)
            return
        # update STEPS

        if self.cur_step_num > (self.len_preextract+self.len_extract):
            number_3 = self.cur_step_num - self.len_preextract - self.len_extract
            number_2 = self.len_extract
            number_1 = self.len_preextract
        elif self.cur_step_num > self.len_preextract:
            number_3 = 0
            number_2 = self.cur_step_num - self.len_preextract
            number_1 = self.len_preextract
        else:
            number_3 = 0
            number_2 = 0
            number_1 = self.cur_step_num
        
        self.canvas.itemconfigure(self.text_preext, text="%d / %d STEPS" % (number_1, self.len_preextract))
        self.canvas.itemconfigure(self.text_ext, text="%d / %d STEPS" % (number_2, self.len_extract))
        self.canvas.itemconfigure(self.text_qpcr, text="%d / %d STEPS" % (number_3, self.len_qpcr))

        # update bar
        # self.preextract_steps = step_array[:self.len_preextract]
        # self.extract_steps = step_array[self.len_preextract:self.len_preextract+self.len_extract]
        # self.qpcr_steps = step_array[-self.len_qpcr:]
        rtime = 0
        total_time = self.preextract_bar.total_time
        for ss in self.step_array[number_1:self.len_preextract]:
            rtime += ss.rtime
        print("array number = %d:%d, rtime for preextract bar = %d" % (number_1, self.len_preextract, rtime))
        self.preextract_bar.reset(total_time, total_time - rtime)

        rtime = 0
        total_time = self.extract_bar.total_time
        for ss in self.step_array[self.len_preextract+number_2:self.len_preextract+self.len_extract]:
            rtime += ss.rtime
        print("array number = %d:%d, rtime for extract bar = %d" % (self.len_preextract+number_2, self.len_preextract+self.len_extract, rtime))
        self.extract_bar.reset(total_time, total_time - rtime)

        rtime = 0
        total_time = self.qpcr_bar.total_time
        for ss in self.step_array[self.len_preextract+self.len_extract+number_3:]:
            rtime += ss.rtime
        print("array number = %d:, rtime for qpcr bar = %d" % (self.len_preextract+self.len_extract+number_3, rtime))
        self.qpcr_bar.reset(total_time, total_time - rtime)

        """Increment extent and update arc and label displaying how much completed."""
        remain_time = self.preextract_bar.remain_time + self.extract_bar.remain_time + self.qpcr_bar.remain_time
        remain_time_str = time.strftime("%M:%S", time.gmtime(remain_time))

        self.canvas.itemconfigure(self.remain_time_id, text=remain_time_str)

        self.play_after = self.canvas.after(1000, self.step)

    # todo: createStep
    def createStep(self, prefix, ii, pcb, step_no, paras):
        step = coutil.PCBStep("%s-%d" % (prefix, ii), paras, pcb, step_no, 0)
        return step

    # todo: all_steps_settings
    def initial_step_array(self, BTpcb, all_steps_setting, steps_preextract, paras_preextract, steps_extract, paras_extract, steps_qpcr, paras_qpcr):
        if self.play_after is not None:
            self.canvas.after_cancel(self.play_after)

        self.cur_step_num = 0
        self.cur_step_ctime = 0

        self.step_array = []

        self.len_preextract = len(steps_preextract)
        self.len_extract = len(steps_extract)
        self.len_qpcr = len(steps_qpcr)

        print("step len of preextract: %d" % self.len_preextract)
        print("step len of extract: %d" % self.len_extract)
        print("step len of qpcr: %d" % self.len_qpcr)

        # parsing preextract
        for ii in range(self.len_preextract):
            step = self.createStep("preextract", ii, BTpcb, steps_preextract[ii], paras_preextract[ii])
            self.step_array.append(step)

        # parsing extract
        for ii in range(self.len_extract):
            step = self.createStep("extract", ii, BTpcb, steps_extract[ii], paras_extract[ii])
            self.step_array.append(step)

        # parsing qpcr
        for ii in range(self.len_qpcr):
            step = self.createStep("qpcr", ii, BTpcb, steps_qpcr[ii], paras_qpcr[ii])
            self.step_array.append(step)

        '''
        self.pcb_a1.resetPCB(random.randrange(10,20))
        self.pcb_a2.resetPCB(random.randrange(10,20))
        self.pcb_b1.resetPCB(random.randrange(10,20))
        self.pcb_b2.resetPCB(random.randrange(10,20))
        self.pcb_b3.resetPCB(random.randrange(10,20))
        self.pcb_b4.resetPCB(random.randrange(10,20))
        self.pcb_b5.resetPCB(random.randrange(10,20))
        self.pcb_b6.resetPCB(random.randrange(10,20))
        self.pcb_b7.resetPCB(random.randrange(10,20))
        self.pcb_b8.resetPCB(random.randrange(10,20))
        self.pcb_c1.resetPCB(random.randrange(10,20))
        self.pcb_c2.resetPCB(random.randrange(10,20))
        self.pcb_c3.resetPCB(random.randrange(10,20))

        step = coutil.PCBStep("preext-a1", "para1", self.pcb_a1, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("preext-a2", "para2", self.pcb_a2, 0)
        self.step_array.append(step)

        step = coutil.PCBStep("ext-b1", "para1", self.pcb_b1, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b2", "para2", self.pcb_b2, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b3", "para3", self.pcb_b3, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b4", "para4", self.pcb_b4, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b5", "para5", self.pcb_b5, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b6", "para6", self.pcb_b6, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b7", "para7", self.pcb_b7, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("ext-b8", "para8", self.pcb_b8, 0)
        self.step_array.append(step)

        step = coutil.PCBStep("qpcr-c1", "para1", self.pcb_c1, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("qpcr-c2", "para2", self.pcb_c2, 0)
        self.step_array.append(step)
        step = coutil.PCBStep("qpcr-c3", "para3", self.pcb_c3, 0)
        self.step_array.append(step)

        self.preextract_steps = self.step_array[:2]
        self.extract_steps = self.step_array[2:10]
        self.qpcr_steps = self.step_array[10:]
        '''


        rtime = 0
        for ss in self.step_array[:self.len_preextract]:
            rtime += ss.rtime
        self.preextract_bar.reset(rtime)

        rtime = 0
        for ss in self.step_array[self.len_preextract:-self.len_qpcr]:
            rtime += ss.rtime
        self.extract_bar.reset(rtime)

        rtime = 0
        for ss in self.step_array[-self.len_qpcr:]:
            rtime += ss.rtime
        self.qpcr_bar.reset(rtime)

        self.canvas.itemconfigure(self.text_preext, text="0 / %d STEPS" % self.len_preextract)
        self.canvas.itemconfigure(self.text_ext, text="0 / %d STEPS" % self.len_extract)
        self.canvas.itemconfigure(self.text_qpcr, text="0 / %d STEPS" % self.len_qpcr)


    def conf_step(self, step_num, step_para):
        self.step_array[step_num].para_array = step_para

    def finish_all(self):
        print("finish all")
        if self.play_after is not None:
            self.canvas.after_cancel(self.play_after)

        # todo: generate result and upload to db
        result = coutil.PCRResults(timestamp=time.time()-random.randrange(0,180))
        self.controller.frames[page_result_chart.PageResultChart].pcrresults = result
        self.controller.frames[page_result_chart.PageResultChart].update()
        self.controller.show_frame(page_result_chart.PageResultChart)

        return

if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageProcessPlay(container, window)

    window.frames[PageProcessPlay] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    frame.preextract_bar.start()
    frame.extract_bar.start()
    frame.qpcr_bar.start()

    frame.preextract_bar.toggle_pause()
    window.mainloop()
    




