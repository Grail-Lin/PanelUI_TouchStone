
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
import page_check
import time

from circle_bar import CircularProgressbar

from copic import img_button_process_on, img_button_home_off, img_button_result_off, img_button_setting_off
from copic import img_button_stop_off, img_button_edit_off, img_button_play_on

class PageProcessPlay(Frame):

    # user data

    #OUTPUT_PATH = Path(__file__).parent
    #ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame_process")

    #def relative_to_assets(self, path: str) -> Path:
    #    return self.ASSETS_PATH / Path(path)

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)


        # gradient background
        #self.canvas = GradientFrame(self, colors = ("white", "#F0F0F0"), width = 1024, height = 600)
        #self.canvas.config(direction = self.canvas.top2bottom)

        
        # flat background
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
        self.canvas.grid(row = 0, column = 0, sticky = "nsew")

        # add elements here
        self.canvas.create_rectangle(
            117.0,
            0.0,
            901.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        self.button_image_process_on = PhotoImage(data=img_button_process_on)
        self.button_process = Button(self,
            image=self.button_image_process_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )
        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        self.button_image_home_off = PhotoImage(data=img_button_home_off)
        self.button_home = Button(self,
            image=self.button_image_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.button_image_result_off = PhotoImage(data=img_button_result_off)
        self.button_result = Button(self,
            image=self.button_image_result_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )
        self.button_result.place(
            x=0.0,
            y=206.0,
            width=120.0,
            height=103.0
        )

        self.button_image_setting_off = PhotoImage(data=img_button_setting_off)
        self.button_setting = Button(self,
            image=self.button_image_setting_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        self.canvas.create_text(
            148.0,
            16.0, #24.0,
            anchor="nw",
            text="PROCESS",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0,
            0.0,
            1024.0,
            600.0,
            fill="#E6EFF4",
            outline="")

        self.button_image_stop_off = PhotoImage(data=img_button_stop_off)
        self.button_stop = Button(self, image=self.button_image_stop_off,
                             borderwidth=0, highlightthickness=0,
                             command=self.Cmd_btn_stop,
                             relief="flat")
        #self.button_stop.place(x=938.0, y=243.0, width=52.0, height=52.0)
        self.button_stop.place(x=903.0, y=208.0, width=121.0, height=103.0)
        self.button_image_edit_off = PhotoImage(data=img_button_edit_off)
        self.button_edit = Button(self, image=self.button_image_edit_off,
                                  borderwidth=0, highlightthickness=0,
                                  command=0,
                                  relief="flat")
        #self.button_edit.place(x=938.0, y=37.0, width=52.0, height=52.0)
        self.button_edit.place(x=903.0, y=2.0, width=121.0, height=103.0)


        self.button_image_play_on = PhotoImage(data=img_button_play_on)
        self.button_play = Button(self,
            image=self.button_image_play_on,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            relief="flat"
        )
        self.button_play.place(
            x=903.0,
            y=103.0,
            width=121.0,
            height=104.0
        )

        self.preextract_bar = CircularProgressbar(self.canvas, 178, 162, 378, 362, 20, start_ang=90, clockwise=1, fg="#CECECE", bg="#569FCB", fill="#FFFFFF", total_time=10)
        self.extract_bar = CircularProgressbar(self.canvas, 404, 162, 604, 362, 20, start_ang=90, clockwise=1, fg="#CECECE", bg="#569FCB", fill="#FFFFFF", total_time=20)
        self.qpcr_bar = CircularProgressbar(self.canvas, 630, 162, 830, 362, 20, start_ang=90, clockwise=1, fg="#CECECE", bg="#569FCB", fill="#FFFFFF", total_time=30)

        self.preextract_bar.add_next_bar(self.extract_bar)
        self.extract_bar.add_next_bar(self.qpcr_bar)

        self.current_bar = self.preextract_bar

        # title of circles
        self.canvas.create_text(
            277.0,
            133.0, #123.0,
            anchor="center",
            text="PRE-EXTRACT",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            511.0,
            133.0, #123.0,
            anchor="center",
            text="EXTRACT",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            729.0,
            133.0, #123.0,
            anchor="center",
            text="QPCR",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        # botton of circle
        self.canvas.create_text(
            277.0,
            385.0, #375.0,
            anchor="center",
            text="2 / 2 STEPS",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            503.0,
            385.0, #375.0,
            anchor="center",
            text="5 / 8 STEPS",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            729.0,
            385.0, #375.0,
            anchor="center",
            #623.0,
            #367.0, #375.0,
            #anchor="nw",
            text="0 / 40 CYCLES",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )
		
		

        # middle of circle
        self.canvas.create_text(
            427.0,
            21.0, #29.0,
            anchor="nw",
            text="Time Remaining?",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_rectangle(
            635.0,
            25.0,
            828.0,
            69.0,
        fill="#FFFFFF",
        outline="black")

        self.remain_time_id = self.canvas.create_text(
            732.0,
            43.0,
            anchor="center",
            text="00:48",
            fill="#17171B",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.after(100, self.step)


    def Cmd_btn_stop(self):
        # hold the process for hardware
        self.preextract_bar.running = False
        self.extract_bar.running = False
        self.qpcr_bar.running = False

        if self.preextract_bar.running == True:
            self.preextract_bar.toggle_pause()
            self.current_bar = self.preextract_bar
        elif self.extract_bar.running == True:
            self.extract_bar.toggle_pause()
            self.current_bar = self.extract_bar
        elif self.qpcr_bar.running == True:
            self.qpcr_bar.toggle_pause()
            self.current_bar = self.qpcr_bar

        self.controller.show_frame(page_check.PageCheck)

    def step(self):
        """Increment extent and update arc and label displaying how much completed."""
        remain_time = self.preextract_bar.remain_time + self.extract_bar.remain_time + self.qpcr_bar.remain_time
        remain_time_str = time.strftime("%M:%S", time.gmtime(remain_time))

        self.canvas.itemconfigure(self.remain_time_id, text=remain_time_str)
        self.canvas.after(100, self.step)


if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageProcessPlay(container, window)

    window.frames[PageProcessPlay] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    frame.preextract_bar.start()
    frame.extract_bar.start()
    frame.qpcr_bar.start()

    frame.preextract_bar.toggle_pause()
    window.mainloop()
    




