
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


'''
    1, from tkinter import Frame
	2, class PageXXX(From)
	3, move path function
	4, use global variables to store image 
	5, sort all elements
	6, add self, to all canvas, button or elements
	7, add these at 
if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFBB")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageLogin(container, window)

    window.frames[PageLogin] = frame
    #frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    window.mainloop()

'''

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
#from GradientFrame import GradientFrame                       # add for gradient color background

from copic import img_button_home_off, img_button_process_off, img_button_setting_on, img_button_result_off, img_button_logout
from copic import image_test_off, image_reset_off, image_user_on, image_time_off, img_btn_confirm_on, img_entry_bg, img_button_cancel_off
from copic import img_empty_button, img_button_next_on, img_button_previous_on, img_btn_add_user

import coutil
import math
import time

class PageSettingUser(Frame):

    # user data

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data
        self.each_page_num = 6
        self.total_result_num = 0
        self.select_result_num = 0

        self.total_page = 0
        self.current_page = 0
        self.result_array = []

        self.role_text = ["Non-used", "Admin", "Advance", "Normal"]


        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)

        self.canvas = Canvas(self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)

        self.canvas.create_rectangle(
            120.0,
            0.0,
            904.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        self.img_btn_add_user = PhotoImage(data = img_btn_add_user)
        self.button_adduser = Button(self,
            image=self.img_btn_add_user,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_adduser.place(
            x=713,
            y=25.0,
            width=163.0,
            height=42.0
        )



        # btn for right side
        # btn setting
        self.img_button_setting_on = PhotoImage(data = img_button_setting_on)
        self.button_setting = Button(self,
            image=self.img_button_setting_on,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        # btn home
        self.img_button_home_off = PhotoImage(data=img_button_home_off)
        self.button_home = Button(self,
            image=self.img_button_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=0, #self.Cmd_btn_home,
            bg="#F9F9F9",
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        # btn process
        self.img_button_process_off = PhotoImage(data = img_button_process_off)
        self.button_process = Button(self,
            image=self.img_button_process_off,
            borderwidth=0,
            highlightthickness=0,
            command=0, #self.Cmd_btn_process,  #lambda: print("button_process clicked"),
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        # btn result
        self.img_button_result_off = PhotoImage(data = img_button_result_off)
        self.button_result = Button(self,
            image=self.img_button_result_off,
            borderwidth=0,
            highlightthickness=0,
            command=0, #self.Cmd_btn_result,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_result.place(
            x=0.0,
            y=206.0,
            width=120.0,
            height=103.0
        )


        # btn for left side
        # btn user
        self.image_user_on = PhotoImage(data = image_user_on)
        self.button_user = Button(self,
            image=self.image_user_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_user_on clicked"),
            relief="flat"
        )
        self.button_user.place(
            x=904.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        # btn time
        self.image_time_off = PhotoImage(data = image_time_off)
        self.button_time = Button(self,
            image=self.image_time_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_time_off clicked"),
            relief="flat"
        )
        self.button_time.place(
            x=904.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        # btn test
        self.image_test_off = PhotoImage(data = image_test_off)
        self.button_test = Button(self,
            image=self.image_test_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_test_off clicked"),
            relief="flat"
        )
        self.button_test.place(
            x=904.4,
            y=206.0,
            width=120.0,
            height=103.0
        )

        # btn password
        self.image_reset_off = PhotoImage(data = image_reset_off)
        self.button_reset = Button(self,
            image=self.image_reset_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_reset_off clicked"),
            relief="flat"
        )
        self.button_reset.place(
            x=904.0,
            y=394.0,
            width=120.0,
            height=103.0
        )

        # btn logout
        self.img_button_logout = PhotoImage(data = img_button_logout)
        self.button_logout = Button(self,
            image=self.img_button_logout,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_logout clicked"),
            relief="flat"
        )
        self.button_logout.place(
            x=904.0,
            y=497.0,
            width=120.0,
            height=103.0
        )


        # title
        self.canvas.create_text(
            148.0,
            24.0,
            anchor="nw",
            text="SETTINGS / USERS",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1, "bold")
        )

        self.canvas.create_rectangle(
            904.0,
            0.0,
            1024.0,
            600.0,
            fill="#E6EFF4",
            outline="")


        # user list
        self.image_empty_button = PhotoImage(data=img_empty_button)

        # title
        self.canvas.create_text(158.0, 89.0, anchor="nw",
            text="USER NAME", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )        

        self.canvas.create_text(394.0, 89.0, anchor="nw",
            text="ROLE", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        self.canvas.create_text(595.0, 89.0, anchor="nw",
            text="DATE ADDED", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )
		
        self.page_label = self.canvas.create_text(168.0, 522.0, anchor="nw",
            text="Page 1/3", fill="#7D8CA7", font=("Noto Sans", 20 * -1)
        )

        # result 1
        self.image_1 = self.canvas.create_image(512.0, 153.0,
            image=self.image_empty_button)

        self.id_r1_uid = self.canvas.create_text(168.0, 133.0, anchor="nw",
            text="user1", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r1_role = self.canvas.create_text(394.0, 133.0, anchor="nw",
            text="normal", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r1_ts = self.canvas.create_text(595.0, 133.0, anchor="nw",
            text="2023-08-23 13:00:32", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_1, '<Button-1>', self.btn_results_1, "")
        self.canvas.tag_bind(self.id_r1_uid, '<Button-1>', self.btn_results_1, "")
        self.canvas.tag_bind(self.id_r1_role, '<Button-1>', self.btn_results_1, "")
        self.canvas.tag_bind(self.id_r1_ts, '<Button-1>', self.btn_results_1, "")

        # result 2
        self.image_2 = self.canvas.create_image(512.0, 213.0,
            image=self.image_empty_button)

        self.id_r2_uid = self.canvas.create_text(168.0, 193.0, anchor="nw",
            text="2023-08-23 13:00:32", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r2_role = self.canvas.create_text(394.0, 193.0, anchor="nw",
            text="1299-3377-2312", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r2_ts = self.canvas.create_text(595.0, 193.0, anchor="nw",
            text="Res. 2 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_2, '<Button-1>', self.btn_results_2, "")
        self.canvas.tag_bind(self.id_r2_uid, '<Button-1>', self.btn_results_2, "")
        self.canvas.tag_bind(self.id_r2_role, '<Button-1>', self.btn_results_2, "")
        self.canvas.tag_bind(self.id_r2_ts, '<Button-1>', self.btn_results_2, "")

        # result 3
        self.image_3 = self.canvas.create_image(512.0, 273.0,
            image=self.image_empty_button)

        self.id_r3_uid = self.canvas.create_text(168.0, 253.0, anchor="nw",
            text="2023-08-23 13:00:33", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r3_role = self.canvas.create_text(394.0, 253.0, anchor="nw",
            text="1299-3377-2313", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r3_ts = self.canvas.create_text(595.0, 253.0, anchor="nw",
            text="Res. 3 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_3, '<Button-1>', self.btn_results_3, "")
        self.canvas.tag_bind(self.id_r3_uid, '<Button-1>', self.btn_results_3, "")
        self.canvas.tag_bind(self.id_r3_role, '<Button-1>', self.btn_results_3, "")
        self.canvas.tag_bind(self.id_r3_ts, '<Button-1>', self.btn_results_3, "")

        # result 4
        self.image_4 = self.canvas.create_image(512.0, 333.0,
            image=self.image_empty_button)

        self.id_r4_uid = self.canvas.create_text(168.0, 313.0, anchor="nw",
            text="2023-08-23 13:00:34", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r4_role = self.canvas.create_text(394.0, 313.0, anchor="nw",
            text="1299-3377-2314", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r4_ts = self.canvas.create_text(595.0, 313.0, anchor="nw",
            text="Res. 4 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_4, '<Button-1>', self.btn_results_4, "")
        self.canvas.tag_bind(self.id_r4_uid, '<Button-1>', self.btn_results_4, "")
        self.canvas.tag_bind(self.id_r4_role, '<Button-1>', self.btn_results_4, "")
        self.canvas.tag_bind(self.id_r4_ts, '<Button-1>', self.btn_results_4, "")

        # result 5
        self.image_5 = self.canvas.create_image(512.0, 393.0,
            image=self.image_empty_button)

        self.id_r5_uid = self.canvas.create_text(168.0, 373.0, anchor="nw",
            text="2023-08-23 13:00:35", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r5_role = self.canvas.create_text(394.0, 373.0, anchor="nw",
            text="1299-3377-2315", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r5_ts = self.canvas.create_text(595.0, 373.0, anchor="nw",
            text="Res. 5 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_5, '<Button-1>', self.btn_results_5, "")
        self.canvas.tag_bind(self.id_r5_uid, '<Button-1>', self.btn_results_5, "")
        self.canvas.tag_bind(self.id_r5_role, '<Button-1>', self.btn_results_5, "")
        self.canvas.tag_bind(self.id_r5_ts, '<Button-1>', self.btn_results_5, "")

        # result 6
        self.image_6 = self.canvas.create_image(512.0, 453.0,
            image=self.image_empty_button)

        self.id_r6_uid = self.canvas.create_text(168.0, 433.0, anchor="nw",
            text="2023-08-23 13:00:36", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r6_role = self.canvas.create_text(394.0, 433.0, anchor="nw",
            text="1299-3377-2316", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")
        self.id_r6_ts = self.canvas.create_text(595.0, 433.0, anchor="nw",
            text="Res. 6 Panel", fill="#17171B", font=("Noto Sans", 20 * -1), state="disabled")

        self.canvas.tag_bind(self.image_6, '<Button-1>', self.btn_results_6, "")
        self.canvas.tag_bind(self.id_r6_uid, '<Button-1>', self.btn_results_6, "")
        self.canvas.tag_bind(self.id_r6_role, '<Button-1>', self.btn_results_6, "")
        self.canvas.tag_bind(self.id_r6_ts, '<Button-1>', self.btn_results_6, "")


        # next btn
        self.image_next_on = PhotoImage(data=img_button_next_on)

        self.button_next = Button(self,
            image=self.image_next_on,
            borderwidth=0,
            highlightthickness=0,
            command=self.cmd_btn_next,
            relief="flat"
        )
        self.button_next.place(x=713.0, y=519.0, width=163.0, height=42.0)

        self.image_previous_on = PhotoImage(data=img_button_previous_on)

        self.button_previous = Button(self,
            image=self.image_previous_on,
            borderwidth=0,
            highlightthickness=0,
            command=self.cmd_btn_previous,
            relief="flat"
        )
        self.button_previous.place(x=522.0, y=519.0, width=163.0, height=42.0)

        self.fetchUsers()


        '''
        self.img_btn_confirm_on = PhotoImage(data=img_btn_confirm_on)
        self.button_confirm = Button(
            image=self.img_btn_confirm_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_10 clicked"),
            relief="flat"
        )
        self.button_confirm.place(
            x=513.0,
            y=415.0,
            width=315.0,
            height=86.0
        )

        self.img_button_cancel_off = PhotoImage(data=img_button_cancel_off)
        self.button_cancel = Button(
            image=self.img_button_cancel_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_11 clicked"),
            relief="flat"
        )
        self.button_cancel.place(
            x=148.0,
            y=416.0,
            width=315.0,
            height=86.0
        )

        self.entry_bg_1 = self.canvas.create_rectangle(430.0, 96.0, 828.0, 182.0,
                                     fill="#FFFFFF", outline="black")

        self.entry_1 = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0
        )

        self.entry_1.place(
            x=438.0,
            y=98.0,
            width=382.0,
            height=84.0
        )

        self.entry_bg_2 = self.canvas.create_rectangle(430.0, 196.0, 828.0, 282.0,
                                     fill="#FFFFFF", outline="black")
        self.entry_2 = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_2.place(
            x=438.0,
            y=198.0,
            width=382.0,
            height=84.0
        )

        self.entry_bg_3 = self.canvas.create_rectangle(430.0, 298.0, 828.0, 384.0,
                                     fill="#FFFFFF", outline="black")
        self.entry_3 = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_3.place(
            x=438.0,
            y=300.0,
            width=382.0,
            height=84.0
        )


        self.canvas.create_text(
            148.0,
            124.0,
            anchor="nw",
            text="USER NAME",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            148.0,
            222.0,
            anchor="nw",
            text="ROLE",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )

        self.canvas.create_text(
            148.0,
            324.0,
            anchor="nw",
            text="PASSWORD",
            fill="#7D8CA7",
            font=("Noto Sans", 24 * -1)
        )
        '''


        # add elements here


    def cmd_btn_next(self):
        self.current_page = self.current_page + 1
        self.update()
        return

    def cmd_btn_previous(self):
        self.current_page = self.current_page - 1
        self.update()
        return

    def hide_all(self):
        self.canvas.itemconfigure(self.image_1, state="hidden")
        self.canvas.itemconfigure(self.id_r1_uid, state="hidden")
        self.canvas.itemconfigure(self.id_r1_role, state="hidden")
        self.canvas.itemconfigure(self.id_r1_ts, state="hidden")
        self.canvas.itemconfigure(self.image_2, state="hidden")
        self.canvas.itemconfigure(self.id_r2_uid, state="hidden")
        self.canvas.itemconfigure(self.id_r2_role, state="hidden")
        self.canvas.itemconfigure(self.id_r2_ts, state="hidden")
        self.canvas.itemconfigure(self.image_3, state="hidden")
        self.canvas.itemconfigure(self.id_r3_uid, state="hidden")
        self.canvas.itemconfigure(self.id_r3_role, state="hidden")
        self.canvas.itemconfigure(self.id_r3_ts, state="hidden")
        self.canvas.itemconfigure(self.image_4, state="hidden")
        self.canvas.itemconfigure(self.id_r4_uid, state="hidden")
        self.canvas.itemconfigure(self.id_r4_role, state="hidden")
        self.canvas.itemconfigure(self.id_r4_ts, state="hidden")
        self.canvas.itemconfigure(self.image_5, state="hidden")
        self.canvas.itemconfigure(self.id_r5_uid, state="hidden")
        self.canvas.itemconfigure(self.id_r5_role, state="hidden")
        self.canvas.itemconfigure(self.id_r5_ts, state="hidden")
        self.canvas.itemconfigure(self.image_6, state="hidden")
        self.canvas.itemconfigure(self.id_r6_uid, state="hidden")
        self.canvas.itemconfigure(self.id_r6_role, state="hidden")
        self.canvas.itemconfigure(self.id_r6_ts, state="hidden")
        return

    def update(self):
        # update page
        temp_str = "Page %d/%d" % (self.current_page+1, self.total_page)
        self.canvas.itemconfigure(self.page_label, text=temp_str)

        # hide all result button
        self.hide_all()
		
        # use current page and total page to modify buttons text
        first_result_num = self.current_page * self.each_page_num
        
        for jj in range(self.each_page_num):
            target_result_num = first_result_num + jj
            if target_result_num < self.total_result_num:
                target_result = self.result_array[target_result_num]
                if jj == 0:
                    self.canvas.itemconfigure(self.image_1, state="normal")
                    self.canvas.itemconfigure(self.id_r1_uid, state="normal")
                    self.canvas.itemconfigure(self.id_r1_role, state="normal")
                    self.canvas.itemconfigure(self.id_r1_ts, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r1_uid, text=target_result.username)
                    self.canvas.itemconfigure(self.id_r1_role, text=self.role_text[target_result.role])
                    self.canvas.itemconfigure(self.id_r1_ts, text=timestamp_str)
                elif jj == 1:
                    self.canvas.itemconfigure(self.image_2, state="normal")
                    self.canvas.itemconfigure(self.id_r2_uid, state="normal")
                    self.canvas.itemconfigure(self.id_r2_role, state="normal")
                    self.canvas.itemconfigure(self.id_r2_ts, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r2_uid, text=target_result.username)
                    self.canvas.itemconfigure(self.id_r2_role, text=self.role_text[target_result.role])
                    self.canvas.itemconfigure(self.id_r2_ts, text=timestamp_str)
                elif jj == 2:
                    self.canvas.itemconfigure(self.image_3, state="normal")
                    self.canvas.itemconfigure(self.id_r3_uid, state="normal")
                    self.canvas.itemconfigure(self.id_r3_role, state="normal")
                    self.canvas.itemconfigure(self.id_r3_ts, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r3_uid, text=target_result.username)
                    self.canvas.itemconfigure(self.id_r3_role, text=self.role_text[target_result.role])
                    self.canvas.itemconfigure(self.id_r3_ts, text=timestamp_str)
                elif jj == 3:
                    self.canvas.itemconfigure(self.image_4, state="normal")
                    self.canvas.itemconfigure(self.id_r4_uid, state="normal")
                    self.canvas.itemconfigure(self.id_r4_role, state="normal")
                    self.canvas.itemconfigure(self.id_r4_ts, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r4_uid, text=target_result.username)
                    self.canvas.itemconfigure(self.id_r4_role, text=self.role_text[target_result.role])
                    self.canvas.itemconfigure(self.id_r4_ts, text=timestamp_str)
                elif jj == 4:
                    self.canvas.itemconfigure(self.image_5, state="normal")
                    self.canvas.itemconfigure(self.id_r5_uid, state="normal")
                    self.canvas.itemconfigure(self.id_r5_role, state="normal")
                    self.canvas.itemconfigure(self.id_r5_ts, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r5_uid, text=target_result.username)
                    self.canvas.itemconfigure(self.id_r5_role, text=self.role_text[target_result.role])
                    self.canvas.itemconfigure(self.id_r5_ts, text=timestamp_str)
                elif jj == 5:
                    self.canvas.itemconfigure(self.image_6, state="normal")
                    self.canvas.itemconfigure(self.id_r6_uid, state="normal")
                    self.canvas.itemconfigure(self.id_r6_role, state="normal")
                    self.canvas.itemconfigure(self.id_r6_ts, state="normal")
                    timestamp_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(target_result.timestamp))
                    self.canvas.itemconfigure(self.id_r6_uid, text=target_result.username)
                    self.canvas.itemconfigure(self.id_r6_role, text=self.role_text[target_result.role])
                    self.canvas.itemconfigure(self.id_r6_ts, text=timestamp_str)

        # if there is more page, let next btn on
        self.button_next['state']="normal"
        if self.current_page == (self.total_page - 1):
            self.button_next['state']="disabled"
        # if there is not the first page, let the previous btn on
        self.button_previous['state']="normal"
        if self.current_page == 0:
            self.button_previous['state']="disabled"

        return

    def btn_results_1(self, click_data):
        # select correct result_data
        self.select_result_num = self.current_page * self.each_page_num
        target_result = self.result_array[self.select_result_num]
        self.btn_result(target_result)
        return

    def btn_results_2(self, click_data):
        # select correct result_data
        self.select_result_num = self.current_page * self.each_page_num + 1
        target_result = self.result_array[self.select_result_num]
        self.btn_result(target_result)
        return
    def btn_results_3(self, click_data):
        # select correct result_data
        self.select_result_num = self.current_page * self.each_page_num + 2
        target_result = self.result_array[self.select_result_num]
        self.btn_result(target_result)
        return
    def btn_results_4(self, click_data):
        # select correct result_data
        self.select_result_num = self.current_page * self.each_page_num + 3
        target_result = self.result_array[self.select_result_num]
        self.btn_result(target_result)
        return
    def btn_results_5(self, click_data):
        # select correct result_data
        self.select_result_num = self.current_page * self.each_page_num + 4
        target_result = self.result_array[self.select_result_num]
        self.btn_result(target_result)
        return
    def btn_results_6(self, click_data):
        # select correct result_data
        self.select_result_num = self.current_page * self.each_page_num + 5
        target_result = self.result_array[self.select_result_num]
        self.btn_result(target_result)
        return

    def fetchUsers(self):
        # fetch results from database
        cosql = coutil.COSQLite('data.db')
        self.result_array = cosql.queryUserLists()
        self.total_result_num = len(self.result_array)
        self.select_result_num = 0
        self.current_page = 0
        self.total_page = math.ceil(self.total_result_num/self.each_page_num)
        self.update()


if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFFF")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageSettingUser(container, window)

    window.frames[PageSettingUser] = frame
    frame.grid(row = 0, column = 0, sticky ="nsew")
    frame.tkraise()
    window.mainloop()
    

