
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


'''
    1, from tkinter import Frame
	2, class PageXXX(From)
	3, move path function
	4, use global variables to store image 
	5, sort all elements
	6, add self, to all canvas, button or elements
	7, add these at 
if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFBB")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageLogin(container, window)

    window.frames[PageLogin] = frame
    #frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    window.mainloop()

'''

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
#from GradientFrame import GradientFrame                       # add for gradient color background

from copic import img_button_home_off, img_button_process_off, img_button_setting_on, img_button_result_off, img_button_logout
from copic import image_test_off, image_reset_off, image_user_off, image_time_off


class PageSettingReset(Frame):

    # user data

    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame0")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def __init__(self, parent, controller):
        Frame.__init__(self, parent)
        self.controller = controller

        # set user data

        # set window size
        width = 1024
        height = 600

        screenwidth = controller.winfo_screenwidth()
        screenheight = controller.winfo_screenheight()
        alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
        controller.geometry(alignstr)
        controller.resizable(width=False, height=False)


        #self.canvas = GradientFrame(parent, colors = ("white", "#F0F0F0"), width = 1024, height = 600)
        #self.canvas.config(direction = self.canvas.top2bottom)
        #self.canvas.pack()
        self.canvas = Canvas(self,
            bg = "#FFFFFF",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)

        self.canvas.create_rectangle(
            120.0,
            0.0,
            904.0,
            600.0,
            fill="#F9F9F9",
            outline="")

        # btn for right side
        self.img_button_setting_on = PhotoImage(data = img_button_setting_on)
        self.button_setting = Button(self,
            image=self.img_button_setting_on,
            borderwidth=0,
            highlightthickness=0,
            command=0,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_setting.place(
            x=0.0,
            y=497.0,
            width=120.0,
            height=103.0
        )

        self.img_button_home_off = PhotoImage(data=img_button_home_off)
        self.button_home = Button(self,
            image=self.img_button_home_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_home,
            bg="#F9F9F9",
            relief="flat"
        )
        self.button_home.place(
            x=0.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.img_button_process_off = PhotoImage(data = img_button_process_off)
        self.button_process = Button(self,
            image=self.img_button_process_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_process,  #lambda: print("button_process clicked"),
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_process.place(
            x=0.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        self.img_button_result_off = PhotoImage(data = img_button_result_off)
        self.button_result = Button(self,
            image=self.img_button_result_off,
            borderwidth=0,
            highlightthickness=0,
            command=self.Cmd_btn_result,
            bg="#FFFFFF",
            relief="flat"
        )
        self.button_result.place(
            x=0.0,
            y=206.0,
            width=120.0,
            height=103.0
        )


        # btn for left side
        self.image_user_off = PhotoImage(data = image_user_off)
        self.button_user = Button(self,
            image=self.image_user_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_user_off clicked"),
            relief="flat"
        )
        self.button_user.place(
            x=904.0,
            y=0.0,
            width=120.0,
            height=103.0
        )

        self.image_time_off = PhotoImage(data = image_time_off)
        self.button_time = Button(self,
            image=self.image_time_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_time_off clicked"),
            relief="flat"
        )
        self.button_time.place(
            x=904.0,
            y=103.0,
            width=120.0,
            height=103.0
        )

        self.image_test_off = PhotoImage(data = image_test_off)
        self.button_test = Button(self,
            image=self.image_test_off,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_test_off clicked"),
            relief="flat"
        )
        self.button_test.place(
            x=904.4,
            y=206.0,
            width=120.0,
            height=103.0
        )

        self.image_reset_on = PhotoImage(data = image_reset_on)
        self.button_reset = Button(self,
            image=self.image_reset_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("image_reset_on clicked"),
            relief="flat"
        )
        self.button_reset.place(
            x=904.0,
            y=394.0,
            width=120.0,
            height=103.0
        )

        self.img_button_logout = PhotoImage(data = img_button_logout)
        self.button_logout = Button(self,
            image=self.img_button_logout,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_logout clicked"),
            relief="flat"
        )
        self.button_logout.place(
            x=904.0,
            y=497.0,
            width=120.0,
            height=103.0
        )



        self.canvas.create_text(
            148.0,
            24.0,
            anchor="nw",
            text="SETTINGS / RESET PASSWORD",
            fill="#569FCB",
            font=("Noto Sans", 32 * -1)
        )

canvas.create_rectangle(
    904.0,
    0.0,
    1024.0,
    600.0,
    fill="#E6EFF4",
    outline="")




button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
button_10 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_10 clicked"),
    relief="flat"
)
button_10.place(
    x=513.0,
    y=415.0,
    width=315.0,
    height=86.0
)

button_image_11 = PhotoImage(
    file=relative_to_assets("button_11.png"))
button_11 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_11 clicked"),
    relief="flat"
)
button_11.place(
    x=148.0,
    y=416.0,
    width=315.0,
    height=86.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    629.0,
    139.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=438.0,
    y=96.0,
    width=382.0,
    height=84.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    629.0,
    239.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=438.0,
    y=196.0,
    width=382.0,
    height=84.0
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    629.0,
    341.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=438.0,
    y=298.0,
    width=382.0,
    height=84.0
)

canvas.create_text(
    148.0,
    128.0,
    anchor="nw",
    text="ORIGINAL PASSWORD",
    fill="#7D8CA7",
    font=("Noto Sans", 24 * -1)
)

canvas.create_text(
    148.0,
    229.0,
    anchor="nw",
    text="NEW PASSWORD",
    fill="#7D8CA7",
    font=("Noto Sans", 24 * -1)
)

canvas.create_text(
    148.0,
    330.0,
    anchor="nw",
    text="REPEAT PASSWORD",
    fill="#7D8CA7",
    font=("Noto Sans", 24 * -1)
)



        # add elements here



if __name__ == "__main__":
    window = Tk()
    window.geometry("1024x600")
    window.configure(bg = "#FFFFFF")

    container = Frame(window, bg="#FFFFBB")
    container.pack(side = "top", fill = "both", expand = True)
    container.grid_rowconfigure(0, weight = 1)
    container.grid_columnconfigure(0, weight = 1)

    window.frames = {}
    frame = PageLogin(container, window)

    window.frames[PageLogin] = frame
    #frame.grid(row = 0, column = 0, sticky ="nsew")

    frame.tkraise()
    window.mainloop()
    

